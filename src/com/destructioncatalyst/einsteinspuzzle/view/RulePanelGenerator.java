package com.destructioncatalyst.einsteinspuzzle.view;

import com.destructioncatalyst.einsteinspuzzle.controller.button.NextRuleButtonController;
import com.destructioncatalyst.einsteinspuzzle.view.compatibility.IPanelContainer;
import com.destructioncatalyst.einsteinspuzzle.view.compatibility.tables.IBinaryStateButton;
import com.destructioncatalyst.einsteinspuzzle.view.compatibility.tables.IFixedNamesMutableTable;
import com.destructioncatalyst.einsteinspuzzle.view.compatibility.tables.ITableFactory;
import com.destructioncatalyst.einsteinspuzzle.view.swingcomponents.CheckBoxBinaryStateButton;
import com.destructioncatalyst.einsteinspuzzle.view.swingcomponents.IPanelGenerator;
import com.destructioncatalyst.einsteinspuzzle.view.swingcomponents.JOptionPaneMessagePopup;

import javax.swing.*;
import java.awt.*;

public class RulePanelGenerator implements IPanelGenerator {
    private JPanel panel;
    private JLabel insertRuleLabel;
    private JButton helpButton;
    private JButton nextButton;
    private JScrollPane scrollPane;
    private JTable table1;
    private JCheckBox fixRuleCheckBox;
    private JButton solveButton;

    private final ITableFactory tableFactory;

    public RulePanelGenerator(ITableFactory tableFactory, IPanelContainer containerFrame) {

        this.tableFactory = tableFactory;

        $$$setupUI$$$();

        scrollPane.getVerticalScrollBar().setUnitIncrement(10);
        scrollPane.getHorizontalScrollBar().setUnitIncrement(10);

        nextButton.addActionListener(e ->
                new NextRuleButtonController((IFixedNamesMutableTable) table1,
                        (IBinaryStateButton) fixRuleCheckBox,
                        containerFrame,
                        new JOptionPaneMessagePopup()).actionPerformed()
        );

    }

    @Override
    public JPanel getPanel() {
        return panel;
    }

    private void createUIComponents() {

        table1 = (JTable) tableFactory.getRuleTable();//new RuleTable(RuleTable.generateTableModel(dimension, objectCount));

        fixRuleCheckBox = new CheckBoxBinaryStateButton();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */

    private void $$$setupUI$$$() {
        createUIComponents();
        panel = new JPanel();
        panel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 4, new Insets(0, 0, 0, 0), -1, -1));
        insertRuleLabel = new JLabel();
        Font insertRuleLabelFont = this.$$$getFont$$$(null, -1, 20, insertRuleLabel.getFont());
        if (insertRuleLabelFont != null) insertRuleLabel.setFont(insertRuleLabelFont);
        insertRuleLabel.setHorizontalAlignment(0);
        insertRuleLabel.setHorizontalTextPosition(0);
        insertRuleLabel.setText("Введите правило:");
        panel.add(insertRuleLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        helpButton = new JButton();
        helpButton.setHorizontalAlignment(0);
        helpButton.setHorizontalTextPosition(2);
        helpButton.setMargin(new Insets(5, 5, 5, 5));
        helpButton.setText("Помощь");
        helpButton.setVerticalAlignment(0);
        helpButton.setVerticalTextPosition(3);
        panel.add(helpButton, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_SOUTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(200, -1), null, 0, false));
        nextButton = new JButton();
        nextButton.setHorizontalAlignment(0);
        nextButton.setHorizontalTextPosition(2);
        nextButton.setMargin(new Insets(5, 5, 5, 5));
        nextButton.setText("Далее");
        nextButton.setVerticalAlignment(0);
        nextButton.setVerticalTextPosition(3);
        panel.add(nextButton, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_SOUTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(200, -1), null, 0, false));
        scrollPane = new JScrollPane();
        scrollPane.setHorizontalScrollBarPolicy(30);
        scrollPane.setVerticalScrollBarPolicy(20);
        panel.add(scrollPane, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        table1.setFocusCycleRoot(false);
        scrollPane.setViewportView(table1);
        fixRuleCheckBox.setText("Зафиксировать положение элементов");
        panel.add(fixRuleCheckBox, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        solveButton = new JButton();
        solveButton.setHorizontalAlignment(0);
        solveButton.setHorizontalTextPosition(2);
        solveButton.setMargin(new Insets(5, 5, 5, 5));
        solveButton.setText("Решить");
        solveButton.setVerticalAlignment(0);
        solveButton.setVerticalTextPosition(3);
        panel.add(solveButton, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_SOUTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(200, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }


}
